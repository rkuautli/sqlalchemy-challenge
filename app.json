from flask import Flask, jsonify
from sqlalchemy import create_engine, func
from sqlalchemy.ext.automap import automap_base
from sqlalchemy.orm import sessionmaker
import pandas as pd

app = Flask(__name__)
# Database Setup
engine = create_engine('sqlite:///path_to_your_database.sqlite')
Base = automap_base()
Base.prepare(engine, reflect=True)

Measurement = Base.classes.measurement
Station = Base.classes.station
Session = sessionmaker(bind=engine)
session = Session()

@app.route('/')
def home():
    return (
        f"Available Routes:<br>"
        f"/api/v1.0/precipitation<br>"
        f"/api/v1.0/stations<br>"
        f"/api/v1.0/tobs<br>"
        f"/api/v1.0/&lt;start&gt;<br>"
        f"/api/v1.0/&lt;start&gt;/&lt;end&gt;"
    )

@app.route('/api/v1.0/precipitation')
def precipitation():
    latest_date = session.query(func.max(Measurement.date)).scalar()
    one_year_ago = pd.to_datetime(latest_date) - pd.DateOffset(years=1)
    results = session.query(Measurement.date, Measurement.prcp).\
              filter(Measurement.date >= one_year_ago).all()
    precip_data = {date: prcp for date, prcp in results}
    return jsonify(precip_data)

@app.route('/api/v1.0/stations')
def stations():
    results = session.query(Station.station, Station.name).all()
    stations = [{"station": station, "name": name} for station, name in results]
    return jsonify(stations)

@app.route('/api/v1.0/tobs')
def tobs():
    latest_date = session.query(func.max(Measurement.date)).scalar()
    one_year_ago = pd.to_datetime(latest_date) - pd.DateOffset(years=1)
    most_active_station = session.query(Measurement.station).\
                          group_by(Measurement.station).\
                          order_by(func.count().desc()).first()[0]
    results = session.query(Measurement.tobs).\
              filter(Measurement.station == most_active_station).\
              filter(Measurement.date >= one_year_ago).all()
    tobs_data = [tob[0] for tob in results]
    return jsonify(tobs_data)

@app.route('/api/v1.0/<start>')
def start(start):
    results = session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\
              filter(Measurement.date >= start).all()
    temps = list(map(lambda x: {"TMIN": x[0], "TAVG": x[1], "TMAX": x[2]}, results))
    return jsonify(temps)

@app.route('/api/v1.0/<start>/<end>')
def start_end(start, end):
    results = session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\
              filter(Measurement.date >= start).\
              filter(Measurement.date <= end).all()
    temps = list(map(lambda x: {"TMIN": x[0], "TAVG": x[1], "TMAX": x[2]}, results))
    return jsonify(temps)

if __name__ == '__main__':
    app.run(debug=True)
    